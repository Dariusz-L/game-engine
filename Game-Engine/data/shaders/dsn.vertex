#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoords;
layout (location = 2) in vec3 tnormal;
layout (location = 3) in vec3 tangent;

out vec2 TexCoords;
out vec3 TangentFragPos;
out vec3 TangentLightPos;
out vec3 TangentViewPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 inverseTransposeModel;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	TexCoords = vec2(texCoords.x, 1 - texCoords.y);
	
    vec3 T = normalize(inverseTransposeModel * tangent);
	vec3 N = normalize(inverseTransposeModel * tnormal);
	vec3 B = normalize(cross(T, N));
	mat3 TBN = transpose(mat3(T, B, N));
	
	TangentLightPos = TBN * lightPos;
	TangentViewPos 	= TBN * viewPos;
	TangentFragPos 	= TBN * vec3(model * vec4(position, 1.0));
}