#version 330 core

in vec2 TexCoords;
in vec3 TangentFragPos;
in vec3 TangentLightPos;
in vec3 TangentViewPos;

uniform float ambientStrength;
uniform vec3 colorDiffuse;
uniform vec3 colorSpecular;

uniform sampler2D texDiffuse;
uniform sampler2D texSpecular;
uniform sampler2D texNormal;

uniform vec3 lightColor;
uniform float specularStrength;

void main()
{
	// NORMAL
	vec3 normal = normalize(texture2D(texNormal, TexCoords).rgb * 2 - 1);

	// AMBIENT
	vec3 ambient = ambientStrength * vec3(texture(texDiffuse, TexCoords)) * lightColor;
	
	// DIFFUSE
	vec3 lightDir = normalize(TangentLightPos - TangentFragPos);
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = colorDiffuse * diff * vec3(texture2D(texDiffuse, TexCoords)) * lightColor;
	
	// SPECULAR
    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
    vec3 reflectDir = reflect(-lightDir, normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16);
    vec3 specular = colorSpecular * spec * vec3(texture2D(texSpecular, TexCoords)) * lightColor;  
	
	// FINAL
	vec3 result = vec3(ambient + diffuse + specular);

	gl_FragColor = vec4(result, 1.0);
}