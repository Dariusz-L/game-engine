#version 330 core

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform float ambientStrength;
uniform vec3 colorDiffuse;
uniform vec3 colorSpecular;

uniform sampler2D texDiffuse;
uniform sampler2D texSpecular;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;

void main()
{
	// AMBIENT
	vec3 ambient = ambientStrength * vec3(texture2D(texDiffuse, TexCoords)) * lightColor;

	// DIFFUSE
	vec3 lightDir = normalize(lightPos - FragPos);
	vec3 diffuse = colorDiffuse * vec3(max(dot(Normal, lightDir), 0) * texture2D(texDiffuse, TexCoords)) * lightColor;
	
	// SPECULAR
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, Normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16);
    vec3 specular = colorSpecular * spec * texture2D(texSpecular, TexCoords) * lightColor;  
	
	// FINAL
	vec3 result = vec3(ambient + diffuse + specular);

	gl_FragColor = vec4(result, 1.0);
}